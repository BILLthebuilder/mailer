{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Contact","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","formSubmit","e","preventDefault","setState","buttonText","data","name","state","email","message","axios","post","then","res","sent","resetForm","catch","error","noerror","response","_this2","react_default","a","createElement","className","onSubmit","htmlFor","onChange","target","value","id","type","placeholder","required","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+PAyEeA,cApEb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAmCRQ,WAAa,SAACC,GACZA,EAAEC,iBAEFT,EAAKU,SAAS,CACZC,WAAY,eAGd,IAAMC,EAAO,CACXC,KAAMb,EAAKc,MAAMD,KACjBE,MAAOf,EAAKc,MAAMC,MAClBC,QAAShB,EAAKc,MAAME,SAGtBC,IAAMC,KAAK,0CAA2CN,GACnDO,KAAK,SAAAC,GACJpB,EAAKU,SAAS,CAAEW,KAAMD,EAAIR,KAAKI,SAAWhB,EAAKsB,eAEhDC,MAAM,SAACC,EAAOC,GAEbzB,EAAKU,SAAS,CAAEW,KAAMG,EAAME,SAASd,KAAKY,MAAOb,WAAY,gBAvDhDX,EA0DnBsB,UAAY,WACVtB,EAAKU,SAAS,CACZG,KAAM,GACNG,QAAS,GACTD,MAAO,GACPJ,WAAY,UA7DdX,EAAKc,MAAQ,CACXD,KAAM,GACNG,QAAS,GACTD,MAAO,GACPM,MAAM,EACNG,MAAO,KACPb,WAAY,gBARGX,wEAWV,IAAA2B,EAAAxB,KACP,OACEyB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,+CACAF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAME,SAAU,SAACxB,GAAD,OAAOmB,EAAKpB,WAAWC,KAErCoB,EAAAC,EAAAC,cAAA,SAAOG,QAAQ,aAAf,aACAL,EAAAC,EAAAC,cAAA,SAAOI,SAAU,SAAA1B,GAAC,OAAImB,EAAKjB,SAAS,CAAEG,KAAML,EAAE2B,OAAOC,SAAUvB,KAAK,YAAYwB,GAAG,QAAQC,KAAK,OAAOC,YAAY,YAAYH,MAAOjC,KAAKW,MAAMD,OAEjJe,EAAAC,EAAAC,cAAA,SAAOG,QAAQ,SAAf,SACAL,EAAAC,EAAAC,cAAA,SAAOI,SAAU,SAAC1B,GAAD,OAAOmB,EAAKjB,SAAS,CAAEK,MAAOP,EAAE2B,OAAOC,SAAUvB,KAAK,QAAQwB,GAAG,QAAQC,KAAK,QAAQC,YAAY,iBAAiBC,UAAQ,EAACJ,MAAOjC,KAAKW,MAAMC,QAE/Ja,EAAAC,EAAAC,cAAA,SAAOG,QAAQ,WAAf,WACAL,EAAAC,EAAAC,cAAA,YAAUI,SAAU,SAAA1B,GAAC,OAAImB,EAAKjB,SAAS,CAAEM,QAASR,EAAE2B,OAAOC,SAAUvB,KAAK,UAAUwB,GAAG,UAAUC,KAAK,OAAOC,YAAY,iCAAiCH,MAAOjC,KAAKW,MAAME,QAASwB,UAAQ,IAE7LZ,EAAAC,EAAAC,cAAA,UAAQQ,KAAK,UAAUnC,KAAKW,MAAMH,YAElCiB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgB5B,KAAKW,MAAMO,KAA1C,eA9BUoB,aCQFC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,KAAK,SAAAoC,GACjCA,EAAaC","file":"static/js/main.e863e23c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\n\nclass Contact extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      name: '',\n      message: '',\n      email: '',\n      sent: false,\n      error: null,\n      buttonText: 'Send Message'\n    }\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <p>Welcome to mailer, Contact me here</p>\n        <div>\n          <form onSubmit={(e) => this.formSubmit(e)}>\n\n            <label htmlFor=\"Your name\">Your name</label>\n            <input onChange={e => this.setState({ name: e.target.value })} name=\"Your name\" id=\"fname\" type=\"text\" placeholder=\"Your Name\" value={this.state.name} />\n\n            <label htmlFor=\"email\">Email</label>\n            <input onChange={(e) => this.setState({ email: e.target.value })} name=\"email\" id=\"email\" type=\"email\" placeholder=\"your@email.com\" required value={this.state.email} />\n\n            <label htmlFor=\"message\">Message</label>\n            <textarea onChange={e => this.setState({ message: e.target.value })} name=\"message\" id=\"message\" type=\"text\" placeholder=\"Please write your message here\" value={this.state.message} required />\n\n            <button type=\"submit\">{this.state.buttonText}</button>\n\n            <div className=\"notification\">{this.state.sent} </div>\n          </form>\n        </div>\n      </div>\n\n    );\n  }\n  formSubmit = (e) => {\n    e.preventDefault()\n\n    this.setState({\n      buttonText: '...sending'\n    })\n\n    const data = {\n      name: this.state.name,\n      email: this.state.email,\n      message: this.state.message\n    }\n\n    axios.post('https://mailer-api2.herokuapp.com/email', data)\n      .then(res => {\n        this.setState({ sent: res.data.message }, this.resetForm());\n      })\n      .catch((error, noerror) => {\n        // this.setState({ sent: 'Sorry, this is our fault please try again later', buttonText: 'Not sent' });\n        this.setState({ sent: error.response.data.error, buttonText: 'Not sent' })\n      })\n  }\n  resetForm = () => {\n    this.setState({\n      name: '',\n      message: '',\n      email: '',\n      buttonText: 'Sent'\n    })\n  }\n}\n\nexport default Contact;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}